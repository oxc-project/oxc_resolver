name: Release NAPI Resolver

on:
  push:
    branches:
      - main
    paths:
      - npm/package.json # Please only commit this file, so we don't need to wait for test CI to pass.

env:
  DEBUG: 'napi:*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.version }}
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Check version changes
        uses: EndBug/version-check@v2
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/oxc-resolver@latest/package.json
          file-name: npm/package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        run: |
          echo "Version change found! New version: ${{ steps.version.outputs.version }} (${{ steps.version.outputs.version_type }})"
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    env:
      version: ${{ needs.check.outputs.version }}
    outputs:
      version: ${{ env.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf

          - os: macos-latest
            target: x86_64-apple-darwin

          - os: macos-latest
            target: aarch64-apple-darwin

    name: Package ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.11.0

      - name: Build with cross
        if: ${{ contains(matrix.target, 'musl') }}
        run: pnpm build -x --target ${{ matrix.target }}

      - name: Build with cross
        if: ${{ contains(matrix.target, 'gnu') }}
        run: pnpm build --use-napi-cross --target ${{ matrix.target }}

      - name: Build with cross
        if: ${{ !contains(matrix.target, 'gnu') && !contains(matrix.target, 'musl') }}
        run: pnpm build --use-napi-cross --target ${{ matrix.target }}

      - name: Test
        if: matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
        run: pnpm test

      - name: Output docker params
        if: ${{ contains(matrix.target, 'linux') }}
        id: docker
        run: |
          node -e `
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          ` >> $GITHUB_OUTPUT
          node -e `
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:lts-alpine')
            } else {
              console.log('IMAGE=node:lts-slim')
            }
          ` >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'linux') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'linux') }}
      - name: Run linux test
        uses: addnab/docker-run-action@v3
        if: ${{ contains(matrix.target, 'linux') }}
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:/oxc_resolver -w /oxc_resolver --platform ${{ steps.docker.outputs.PLATFORM }}
          run: pnpm test

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: napi/*.node
        
  publish:
    name: Publish NAPI
    runs-on: ubuntu-latest
    permissions:
      contents: write # for softprops/action-gh-release@v1
      id-token: write # for `npm publish --provenance`
    needs:
      - build
    steps:
      - uses: actions/checkout@v4

      - name: corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare dirs and artifacts
        run: |
          pnpm napi create-npm-dirs --package-json-path npm/package.json
          pnpm napi artifacts --package-json-path npm/package.json

      - name: Publish npm packages as latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        shell: bash
        run: |
          cp napi/index.js npm/index.js
          cp napi/index.d.ts npm/index.d.ts
          pnpm napi pre-publish -t npm --package-json-path npm/package.json
          npm publish npm/ --tag latest --provenance --access public
