[package]
version      = "1.0.1"
name         = "oxc_resolver"
authors      = ["Boshen <boshenc@gmail.com>"]
categories   = ["development-tools"]
description  = "ESM / CJS module resolution"
edition      = "2021"
homepage     = "https://github.com/oxc-project/oxc_resolver"
keywords     = ["node", "resolve", "cjs", "esm", "enhanced-resolve"]
license      = "MIT"
readme       = "README.md"
repository   = "https://github.com/oxc-project/oxc_resolver"
rust-version = "1.60"
include      = ["/src", "/examples", "/benches"]

[workspace]
members = [
  "napi",
]

[lib]
doctest = false

[[bench]]
name    = "resolver"
harness = false

[lints.clippy]
all = { level = "warn" }
# restriction
dbg_macro     = "warn"
todo          = "warn"
unimplemented = "warn"
# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr = "warn"
# These two are mutually exclusive, I like `mod.rs` files for better fuzzy searches on module entries.
self_named_module_files         = "warn" # "-Wclippy::mod_module_files"
empty_drop                      = "warn"
empty_structs_with_brackets     = "warn"
exit                            = "warn"
filetype_is_file                = "warn"
get_unwrap                      = "warn"
impl_trait_in_params            = "warn"
rc_buffer                       = "warn"
rc_mutex                        = "warn"
rest_pat_in_fully_bound_structs = "warn"
unnecessary_safety_comment      = "warn"
undocumented_unsafe_blocks      = "warn"
# I want to write the best Rust code so both pedantic and nursery is enabled.
# We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
nursery  = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
# Allowed rules
# pedantic
# This rule is too pedantic, I don't want to force this because naming things are hard.
module_name_repetitions = "allow"
# All triggers are mostly ignored in our codebase, so this is ignored globally.
struct_excessive_bools = "allow"
too_many_lines         = "allow"
# #[must_use] is creating too much noise for this codebase, it does not add much value except nagging
# the programmer to add a #[must_use] after clippy has been run.
# Having #[must_use] every where also hinders readability.
must_use_candidate = "allow"
# used_underscore_binding= "allow"
doc_markdown = "allow"
# nursery
# `const` functions do not make sense for our project because this is not a `const` library.
# This rule also confuses new comers and forces them to add `const` blindlessly without any reason.
missing_const_for_fn = "allow"

[[example]]
name = "resolver"

[dependencies]
tracing = { version = "0.1" }
dashmap = { version = "5.5.3" }
serde = { version = "1.0.193", features = ["derive"] } # derive for Deserialize from package.json
serde_json = { version = "1.0.108", features = [
  "preserve_order",
] } # preserve_order: package_json.exports requires order such as `["require", "import", "default"]`
rustc-hash = { version = "1.1.0", default-features = false, features = ["std"] }
indexmap = { version = "2.1.0", features = ["serde"] } # serde for Deserialize from package.json
dunce = "1.0.4" # Normalize Windows paths to the most compatible format, avoiding UNC where possible
once_cell = "1.19.0" # Use `std::sync::OnceLock::get_or_try_init` when it is stable.
thiserror = { version = "1.0.51" }

codspeed-criterion-compat = { version = "2.3.3", default-features = false, optional = true }

[dev-dependencies]
vfs       = "0.10.0"                                        # for testing with in memory file system
rayon     = { version = "1.8.0" }
criterion = { version = "0.5.1", default-features = false }

[features]
codspeed = ["codspeed-criterion-compat"]
